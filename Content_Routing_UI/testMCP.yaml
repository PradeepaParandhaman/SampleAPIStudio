kind: MCPTool
apiVersion: api.webmethods.io/beta
metadata:
  name: testMCP
  namespace: test
  version: test
  tags:
    - test
  description: ''
spec:
  tools:
    - name: updatePet
      description: Update an existing pet by Id
      inputSchema:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 10
          name:
            type: string
            example: doggie
          category:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 1
              name:
                type: string
                example: Dogs
            xml:
              name: category
          photoUrls:
            type: array
            xml:
              wrapped: true
            items:
              type: string
              xml:
                name: photoUrl
          tags:
            type: array
            xml:
              wrapped: true
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                name:
                  type: string
              xml:
                name: tag
          status:
            type: string
            description: pet status in the store
            enum:
              - available
              - pending
              - sold
        required:
          - name
          - photoUrls
      x-original-path: /pet
    - name: addPet
      description: Add a new pet to the store
      inputSchema:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 10
          name:
            type: string
            example: doggie
          category:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 1
              name:
                type: string
                example: Dogs
            xml:
              name: category
          photoUrls:
            type: array
            xml:
              wrapped: true
            items:
              type: string
              xml:
                name: photoUrl
          tags:
            type: array
            xml:
              wrapped: true
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                name:
                  type: string
              xml:
                name: tag
          status:
            type: string
            description: pet status in the store
            enum:
              - available
              - pending
              - sold
        required:
          - name
          - photoUrls
      x-original-path: /pet
    - name: findPetsByStatus
      description: Multiple status values can be provided with comma separated strings
      inputSchema:
        type: object
        properties:
          status:
            description: Status values that need to be considered for filter
            x-parameter-location: query
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      x-original-path: /pet/findByStatus
    - name: getPetById
      description: Returns a single pet
      inputSchema:
        type: object
        properties:
          petId:
            description: ID of pet to return
            x-parameter-location: path
            type: integer
            format: int64
        required:
          - petId
      x-original-path: /pet/{petId}
    - name: updatePetWithForm
      description: Make a POST request to /pet/{petId}
      inputSchema:
        type: object
        properties:
          petId:
            description: ID of pet that needs to be updated
            x-parameter-location: path
            type: integer
            format: int64
          name:
            description: Name of pet that needs to be updated
            x-parameter-location: query
            type: string
          status:
            description: Status of pet that needs to be updated
            x-parameter-location: query
            type: string
        required:
          - petId
      x-original-path: /pet/{petId}
    - name: deletePet
      description: Make a DELETE request to /pet/{petId}
      inputSchema:
        type: object
        properties:
          api_key:
            description: api_key parameter
            x-parameter-location: header
            type: string
          petId:
            description: Pet id to delete
            x-parameter-location: path
            type: integer
            format: int64
        required:
          - petId
      x-original-path: /pet/{petId}
  api:
    $path: /Content_Routing_UI/petstore.yml
